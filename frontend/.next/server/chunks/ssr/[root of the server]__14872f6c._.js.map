{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["file:///home/nindang/Documents/SocialNetwork/frontend/src/app/likepage/page.tsx"],"sourcesContent":["'use client'\nimport { useState, useEffect, useRef } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport axios from \"axios\";\nimport { Heart, MessageCircle, Repeat, Ellipsis, X, MoreHorizontal, Image, Video } from 'lucide-react';\n\ninterface PostType {\n  post_id: number;\n  user_id: number;\n  avatar: string;\n  username: string;\n  time: string;\n  content: string;\n  image: string;\n  video?: string;\n  likes: number;\n  comments: number;\n  reposts: number;\n  saves: number;\n  liked_by?: string[];\n  reposted_by?: string[];\n  created_at?: string;\n}\n\nexport default function LikePage() {\n  const router = useRouter();\n  const [likedPosts, setLikedPosts] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchLikedPosts = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        if (!token) {\n          router.push('/login');\n          return;\n        }\n\n        // Lấy user hiện tại\n        let currentUser;\n        try {\n          const userRes = await axios.get('http://127.0.0.1:8000/users/me', {\n            headers: { Authorization: `Bearer ${token}` }\n          });\n          currentUser = userRes.data.user;\n          localStorage.setItem('currentUser', JSON.stringify(currentUser));\n        } catch (error) {\n          console.error(\"Error fetching current user:\", error);\n          router.push('/login');\n          return;\n        }\n\n        // Lấy tất cả bài viết\n        const response = await axios.get('http://127.0.0.1:8000/posts', {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n        console.log(\"Raw response:\", response.data);\n\n        // Lọc các bài viết đã like và build lại object post giống trang chủ\n        const posts = Array.isArray(response.data) ? response.data : (response.data.results || response.data.posts || []);\n        const liked = posts.filter((post: any) => {\n          if (!post.liked_by) return false;\n          const likedByIds = post.liked_by.map((id: any) => String(id).trim());\n          const currentUserId = String(currentUser.user_id).trim();\n          return likedByIds.includes(currentUserId);\n        });\n\n        // Build lại object post cho đúng giao diện trang chủ\n        const likedPostsWithUser = await Promise.all(liked.map(async (post: any) => {\n          let userInfo = post.user;\n          if (!userInfo) {\n            try {\n              const userRes = await axios.get(`http://127.0.0.1:8000/users/${post.user_id}`, {\n                headers: { Authorization: `Bearer ${token}` }\n              });\n              userInfo = userRes.data.user;\n            } catch {\n              userInfo = { username: post.user_id, avatar: \"https://placehold.co/40x40?text=U\" };\n            }\n          }\n          return {\n            ...post,\n            avatar: userInfo.avatar || `https://placehold.co/40x40?text=${userInfo.username || post.user_id}`,\n            username: userInfo.username || post.user_id,\n            time: post.created_at ? formatTime(post.created_at) : '',\n            image: post.image_id ? `http://127.0.0.1:8000/media/${post.image_id}` : post.image || '',\n            video: post.video_id ? `http://127.0.0.1:8000/media/${post.video_id}` : post.video || '',\n            likes: typeof post.likes === 'number' ? post.likes : 0,\n            comments: typeof post.comments === 'number' ? post.comments : 0,\n            reposts: typeof post.reposts === 'number' ? post.reposts : 0,\n            saves: typeof post.saves === 'number' ? post.saves : 0,\n            created_at: post.created_at,\n          };\n        }));\n\n        console.log(\"Current user ID:\", currentUser.user_id);\n        console.log(\"Found liked posts:\", likedPostsWithUser.length);\n        console.log(\"Liked posts data:\", likedPostsWithUser);\n\n        setLikedPosts(likedPostsWithUser);\n      } catch (error) {\n        console.error(\"Error fetching liked posts:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchLikedPosts();\n  }, [router]);\n\n  return (\n    <div className=\"w-full h-screen bg-gray-100 flex flex-col items-center p-4\">\n      <h1 className=\"text-xl text-black font-bold mb-4\">Bài viết đã thích</h1>\n      <div className=\"max-w-xl w-full h-auto\">\n        <div className=\"bg-white rounded-2xl shadow-md p-4 space-y-4\">\n          <div className=\"space-y-4 max-h-[80vh] overflow-y-auto\">\n            {loading ? (\n              <div className=\"text-center py-4\">Đang tải...</div>\n            ) : likedPosts.length === 0 ? (\n              <div className=\"text-center\">\n                Bạn chưa thích bài viết nào\n              </div>\n            ) : (\n              likedPosts.map((post: any) => (\n                <Post\n                  key={post._id || post.post_id}\n                  {...post}\n                  setLocalPosts={setLikedPosts}\n                  currentUser={JSON.parse(localStorage.getItem('currentUser') || '{}')}\n                />\n              ))\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction Post({\n  post_id,\n  user_id,\n  avatar,\n  username,\n  time,\n  content,\n  image,\n  video,\n  likes,\n  comments,\n  reposts,\n  saves,\n  liked_by = [],\n  reposted_by = [],\n  created_at,\n  setLocalPosts,\n  currentUser\n}: PostType & {\n  setLocalPosts: React.Dispatch<React.SetStateAction<PostType[]>>;\n  currentUser: { username: string; user_id: string } | null;\n}) {\n  const [showComment, setShowComment] = useState(false);\n  const [liked, setLiked] = useState(false);\n  const [likeCount, setLikeCount] = useState(likes);\n  const [reposted, setReposted] = useState(false);\n  const [repostCount, setRepostCount] = useState(reposts);\n  const [newComment, setNewComment] = useState(\"\");\n  const [commentCount, setCommentCount] = useState(comments);\n  const [showOptions, setShowOptions] = useState(false);\n  const [editMode, setEditMode] = useState(false);\n  const [editedContent, setEditedContent] = useState(content);\n  const [isFollowing, setIsFollowing] = useState(false);\n  const router = useRouter();\n  const token = typeof window !== 'undefined' ? localStorage.getItem('token') : null;\n  const [errorMsg, setErrorMsg] = useState(\"\");\n  const optionRef = useRef<HTMLDivElement>(null);\n  const [isFollowLoading, setIsFollowLoading] = useState(false);\n  const [commentImage, setCommentImage] = useState<File | null>(null);\n  const [commentVideo, setCommentVideo] = useState<File | null>(null);\n\n  useEffect(() => {\n    if (!post_id || !token || !currentUser) return;\n\n    const fetchPostAndUser = async () => {\n      try {\n        // Fetch post để lấy trạng thái like chính xác\n        const postRes = await fetch(`http://127.0.0.1:8000/posts/${post_id}`, {\n          headers: { 'Authorization': `Bearer ${token}` },\n          credentials: 'include',\n        });\n        if (!postRes.ok) return;\n        const postData = await postRes.json();\n\n        // Kiểm tra liked\n        if (postData && Array.isArray(postData.liked_by)) {\n          const userHasLiked = postData.liked_by\n            .map((id: string) => String(id).trim())\n            .includes(String(currentUser.user_id).trim());\n          setLiked(userHasLiked);\n          setLikeCount(postData.likes);\n        }\n\n        // Kiểm tra reposted\n        if (postData && Array.isArray(postData.reposted_by)) {\n          const userHasReposted = postData.reposted_by\n            .map((id: string) => String(id).trim())\n            .includes(String(currentUser.user_id).trim());\n          setReposted(userHasReposted);\n          setRepostCount(postData.reposts);\n        }\n      } catch (error) {\n        console.error(\"Failed to fetch post:\", error);\n      }\n    };\n\n    fetchPostAndUser();\n  }, [post_id, token, currentUser]);\n\n  const handleLike = async () => {\n    try {\n      if (!token || !currentUser) return;\n\n      const response = await fetch(`http://127.0.0.1:8000/posts/${post_id}/like`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) throw new Error('Failed to like post');\n      const data = await response.json();\n\n      if (data && data.liked_by) {\n        const userHasLiked = data.liked_by\n          .map((id: string) => String(id).trim())\n          .includes(String(currentUser.user_id).trim());\n        setLiked(userHasLiked);\n        setLikeCount(data.likes ?? 0);\n      }\n    } catch (error) {\n      console.error('Error liking post:', error);\n    }\n  };\n\n  const handleRepost = async () => {\n    try {\n      if (!token || !currentUser) return;\n      const response = await fetch(`http://127.0.0.1:8000/posts/${post_id}/repost`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n      if (!response.ok) throw new Error('Failed to repost');\n      const data = await response.json();\n      if (data && data.reposted_by) {\n        const userHasReposted = data.reposted_by\n          .map((id: string) => String(id).trim())\n          .includes(String(currentUser.user_id).trim());\n        setReposted(userHasReposted);\n        setRepostCount(data.reposts ?? 0);\n      }\n    } catch (error) {\n      console.error('Error reposting:', error);\n    }\n  };\n\n  return (\n    <div className=\"bg-white text-black p-4 shadow-md w-full rounded-lg border\">\n      <div className=\"flex justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          <img src={avatar || \"/default-avatar.png\"} alt=\"Avatar\" className=\"w-10 h-10 rounded-full\" />\n          <div>\n            <p className=\"font-semibold\">{username || user_id}</p>\n            <p className=\"text-sm text-gray-500\">{time || (created_at ? formatTime(created_at) : \"\")}</p>\n          </div>\n        </div>\n      </div>\n\n      <div onClick={() => router.push(`/comment/${post_id}`)}>\n        <p className=\"mt-2\">{content}</p>\n        {image && <img src={image} alt=\"Post\" className=\"mt-2 rounded-lg\" />}\n        {video && <video src={video} controls className=\"mt-2 rounded-lg w-full\" />}\n      </div>\n\n      <div className=\"flex gap-4 text-gray-500 mt-3\">\n        <ActionButton \n          icon={<Heart size={18} className={liked ? \"text-red-500\" : \"text-gray-500\"} />} \n          count={likeCount} \n          onClick={handleLike}\n        />\n        <ActionButton \n          icon={<MessageCircle size={18} />} \n          count={commentCount} \n          onClick={() => setShowComment((prev) => !prev)}\n        />\n        <ActionButton \n          icon={<Repeat size={18} className={reposted ? \"text-green-500\" : \"text-gray-500\"} />} \n          count={repostCount} \n          onClick={handleRepost}\n        />\n      </div>\n    </div>\n  );\n}\n\nfunction ActionButton({ \n  icon, \n  count, \n  onClick \n}: { \n  icon: React.ReactNode; \n  count: number; \n  onClick?: (e: React.MouseEvent) => void; \n}) {\n  return (\n    <button \n      className=\"flex items-center space-x-1 hover:text-black\"\n      onClick={(e) => {\n        e.stopPropagation();\n        onClick?.(e);\n      }}\n    >\n      {icon}\n      <span>{count}</span>\n    </button>\n  );\n}\n\nfunction formatTime(createdAt: string) {\n  const now = new Date();\n  const postDate = new Date(createdAt);\n  const diffInMinutes = Math.floor((now.getTime() - postDate.getTime()) / (1000 * 60));\n  if (diffInMinutes < 60) {\n    return `${diffInMinutes} phút`;\n  } else if (diffInMinutes < 1440) {\n    const diffInHours = Math.floor(diffInMinutes / 60);\n    return `${diffInHours} giờ`;\n  } else {\n    const diffInDays = Math.floor(diffInMinutes / 1440);\n    return `${diffInDays} ngày`;\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}